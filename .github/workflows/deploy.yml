name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_WORKSPACE: test
  AWS_REGION: ${{ secrets.AWS_REGION }}
  VITE_APP_API_URL: ${{ secrets.API_URL }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_APP_API_URL: ${{ env.VITE_APP_API_URL }}

      - name: Terraform Init
        run: |
          cd terraform/environments/test
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: |
          cd terraform/environments/test
          terraform plan \
            -var="project_name=eco-cloud-guardian" \
            -var="environment=test" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: |
          cd terraform/environments/test
          terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload to S3
        run: |
          BUCKET_NAME=$(cd terraform/environments/test && terraform output -raw website_url | cut -d'/' -f1)
          aws s3 sync dist/ s3://$BUCKET_NAME \
            --delete \
            --cache-control "max-age=31536000,public" \
            --exclude "*.html" \
            --exclude "*.json"

          # Upload HTML and JSON files with different cache settings
          aws s3 sync dist/ s3://$BUCKET_NAME \
            --delete \
            --cache-control "no-cache" \
            --include "*.html" \
            --include "*.json"

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(cd terraform/environments/test && terraform output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*" 